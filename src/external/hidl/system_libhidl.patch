diff --git a/base/Status.cpp b/base/Status.cpp
index 90474a0..7379aad 100644
--- a/base/Status.cpp
+++ b/base/Status.cpp
@@ -22,6 +22,19 @@
 
 #include <unordered_map>
 
+#if defined(__linux__)  /* M3E: */
+#include <string.h> // strerror()
+#endif 
+
+// NOTE: For Windows, you must include logging.h after windows.h to allow the
+// following code to suppress the evil ERROR macro:
+#ifdef _WIN32
+// windows.h includes wingdi.h which defines an evil macro ERROR.
+#ifdef ERROR
+#undef ERROR
+#endif
+#endif
+
 namespace android {
 namespace hardware {
 
@@ -169,7 +182,9 @@ namespace details {
 
         if (gReturnRestriction == HidlReturnRestriction::ERROR_IF_UNCHECKED) {
             LOG(ERROR) << "Failed to check status of HIDL Return.";
+#if ENABLE_BACKTRACE // M3E:
             CallStack::logStack("unchecked HIDL return", CallStack::getCurrent(10).get(), ANDROID_LOG_ERROR);
+#endif
         } else {
             LOG(FATAL) << "Failed to check status of HIDL Return.";
         }
diff --git a/base/include/hidl/HidlInternal.h b/base/include/hidl/HidlInternal.h
index 0b80cd4..d69a95c 100644
--- a/base/include/hidl/HidlInternal.h
+++ b/base/include/hidl/HidlInternal.h
@@ -155,6 +155,7 @@ struct HidlInstrumentor {
     };
 
     // Signature of the instrumentation callback function.
+#if !defined(_MSC_VER) /* M3E: MSVC */
     using InstrumentationCallback = std::function<void(
             const InstrumentationEvent event,
             const char *package,
@@ -162,6 +163,15 @@ struct HidlInstrumentor {
             const char *interface,
             const char *method,
             std::vector<void *> *args)>;
+#else
+		typedef void (* InstrumentationCallback)(
+		const InstrumentationEvent event,
+		const char *package,
+		const char *version,
+		const char *interfaced,
+		const char *method,
+		std::vector<void *> *args);
+#endif
 
     explicit HidlInstrumentor(
             const std::string &package,
diff --git a/base/include/hidl/HidlSupport.h b/base/include/hidl/HidlSupport.h
index 93a6251..e8fc2ae 100644
--- a/base/include/hidl/HidlSupport.h
+++ b/base/include/hidl/HidlSupport.h
@@ -33,6 +33,23 @@
 #include <utils/StrongPointer.h>
 #include <vector>
 
+/* M3E: Add */
+#include <stdint.h>
+#if !defined(__attribute)
+    #define  __attribute  __attribute__
+#endif //    __attribute
+#if defined(_MSC_VER)
+    #if !defined(EXPORT_HIDL)
+        #define  EXPORT_HIDL      __declspec(dllimport)
+    #endif //    EXPORT_HIDL
+    #if !defined(EXPORT_HARDWARE)
+        #define  EXPORT_HARDWARE  __declspec(dllimport)
+    #endif //    EXPORT_HARDWARE
+#else  // _MSC_VER
+    #define EXPORT_HIDL 
+    #define EXPORT_HARDWARE  
+#endif // _MSC_VER
+
 namespace android {
 
 // this file is included by all hidl interface, so we must forward declare the
@@ -327,7 +344,9 @@ protected:
 template<typename T>
 struct hidl_vec {
     hidl_vec() {
+#if !defined(_MSC_VER)
         static_assert(hidl_vec<T>::kOffsetOfBuffer == 0, "wrong offset");
+#endif
 
         memset(this, 0, sizeof(*this));
         // mSize is 0
@@ -929,7 +948,11 @@ std::string arrayToString(const Array &a, size_t size);
 
 template<size_t SIZE1>
 std::string arraySizeToString() {
+#if !defined(_MSC_VER) // M3E:
     return std::string{"["} + toString(SIZE1) + "]";
+#else
+    return std::string{ "[" } + std::to_string(SIZE1) + "]";
+#endif
 }
 
 template<size_t SIZE1, size_t SIZE2, size_t... SIZES>
@@ -1025,21 +1048,23 @@ constexpr hidl_invalid_type<T> hidl_enum_values;
  */
 template <typename T, typename = std::enable_if_t<std::is_enum<T>::value>>
 struct hidl_enum_range {
-    constexpr auto begin() const { return std::begin(details::hidl_enum_values<T>); }
-    constexpr auto cbegin() const { return begin(); }
-    constexpr auto rbegin() const { return std::rbegin(details::hidl_enum_values<T>); }
-    constexpr auto crbegin() const { return rbegin(); }
-    constexpr auto end() const { return std::end(details::hidl_enum_values<T>); }
-    constexpr auto cend() const { return end(); }
-    constexpr auto rend() const { return std::rend(details::hidl_enum_values<T>); }
-    constexpr auto crend() const { return rend(); }
+    /*constexpr*/ auto begin() const { return std::begin(details::hidl_enum_values<T>); }
+    /*constexpr*/ auto cbegin() const { return begin(); }
+    /*constexpr*/ auto rbegin() const { return std::rbegin(details::hidl_enum_values<T>); }
+    /*constexpr*/ auto crbegin() const { return rbegin(); }
+    /*constexpr*/ auto end() const { return std::end(details::hidl_enum_values<T>); }
+    /*constexpr*/ auto cend() const { return end(); }
+    /*constexpr*/ auto rend() const { return std::rend(details::hidl_enum_values<T>); }
+    /*constexpr*/ auto crend() const { return rend(); }
 };
 
 template <typename T, typename = std::enable_if_t<std::is_enum<T>::value>>
 struct hidl_enum_iterator {
+#if !defined(_MSC_VER)
     static_assert(!std::is_enum<T>::value,
                   "b/78573628: hidl_enum_iterator was renamed to hidl_enum_range because it is not "
                   "actually an iterator. Please use that type instead.");
+#endif
 };
 
 /**
diff --git a/base/include/hidl/Status.h b/base/include/hidl/Status.h
index 817277f..2f40023 100644
--- a/base/include/hidl/Status.h
+++ b/base/include/hidl/Status.h
@@ -27,6 +27,13 @@
 namespace android {
 namespace hardware {
 
+#if defined(__linux__) /* M3E: Add */
+#  if defined(Status)
+#    undef Status
+#  endif
+#endif
+
+
 // HIDL formally separates transport error codes from interface error codes. When developing a HIDL
 // interface, errors relevant to a service should be placed in the interface design for that HAL.
 //
@@ -220,6 +227,10 @@ public:
     // postcondition: other is safe to destroy after moving to *this.
     Return(Return&& other) noexcept = default;
     Return& operator=(Return&&) noexcept = default;
+#if defined(_MSC_VER) // M3E:
+    Return(Return& other) noexcept = default;
+    Return& operator=(Return&) noexcept = default;
+#endif
 
     ~Return() = default;
 
@@ -249,6 +260,10 @@ public:
     // postcondition: other is safe to destroy after moving to *this.
     Return(Return&& other) noexcept = default;
     Return& operator=(Return&&) noexcept = default;
+#if defined(_MSC_VER) // M3E:
+    Return(Return& other) noexcept = default;
+    Return& operator=(Return&) noexcept = default;
+#endif
 
     ~Return() = default;
 
diff --git a/transport/include/hidl/HidlTransportSupport.h b/transport/include/hidl/HidlTransportSupport.h
index a132bfa..916733a 100644
--- a/transport/include/hidl/HidlTransportSupport.h
+++ b/transport/include/hidl/HidlTransportSupport.h
@@ -134,11 +134,13 @@ Return<sp<IChild>> castInterface(sp<IParent> parent, const char* childIndicator,
     if (!canCastRet) {
         return sp<IChild>(nullptr); // cast failed.
     }
+#if 0 // M3E: no support of remote currently
     // TODO b/32001926 Needs to be fixed for socket mode.
     if (parent->isRemote()) {
         // binderized mode. Got BpChild. grab the remote and wrap it.
         return sp<IChild>(new BpChild(getOrCreateCachedBinder(parent.get())));
     }
+#endif
     // Passthrough mode. Got BnChild or BsChild.
     return sp<IChild>(static_cast<IChild *>(parent.get()));
 }
@@ -155,10 +157,12 @@ sp<IType> getServiceInternal(const std::string& instance, bool retry, bool getSt
         return nullptr;
     }
 
+#if 0 // M3E: no support of remote currently
     if (base->isRemote()) {
         // getRawServiceInternal guarantees we get the proper class
         return sp<IType>(new BpType(getOrCreateCachedBinder(base.get())));
     }
+#endif
 
     return IType::castFrom(base);
 }
diff --git a/transport/include/hidl/ServiceManagement.h b/transport/include/hidl/ServiceManagement.h
index a962034..a4337b6 100644
--- a/transport/include/hidl/ServiceManagement.h
+++ b/transport/include/hidl/ServiceManagement.h
@@ -22,6 +22,12 @@
 #include <android/hidl/base/1.0/IBase.h>
 #include <utils/StrongPointer.h>
 
+#if defined(_MSC_VER) // M3E:
+#if defined(interface)
+#undef interface
+#endif
+#endif
+
 namespace android {
 
 namespace hidl {
diff --git a/transport/token/1.0/utils/HybridInterface.cpp b/transport/token/1.0/utils/HybridInterface.cpp
index 106ad4e..0c6594e 100644
--- a/transport/token/1.0/utils/HybridInterface.cpp
+++ b/transport/token/1.0/utils/HybridInterface.cpp
@@ -80,10 +80,12 @@ sp<HInterface> retrieveHalInterface(const HalToken& token) {
         if (isBadTokenManager()) {
             return nullptr;
         }
+#if 0 // M3E:
         transaction = gTokenManager->get(token);
         if (isBadTransaction(transaction)) {
             return nullptr;
         }
+#endif
     }
     return static_cast<sp<HInterface> >(transaction);
 }
diff --git a/transport/token/1.0/utils/include/hidl/HybridInterface.h b/transport/token/1.0/utils/include/hidl/HybridInterface.h
index 125d5e8..5f75115 100644
--- a/transport/token/1.0/utils/include/hidl/HybridInterface.h
+++ b/transport/token/1.0/utils/include/hidl/HybridInterface.h
@@ -186,7 +186,7 @@ constexpr uint32_t DEFAULT_GET_HAL_TOKEN_TRANSACTION_CODE =
         B_PACK_CHARS('_', 'G', 'H', 'T');
 
 sp<HInterface> retrieveHalInterface(const HalToken& token);
-bool createHalToken(const sp<HInterface>& interface, HalToken* token);
+bool createHalToken(const sp<HInterface>& _interface, HalToken* token);
 bool deleteHalToken(const HalToken& token);
 
 template <typename HINTERFACE,
