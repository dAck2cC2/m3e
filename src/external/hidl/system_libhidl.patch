diff --git a/base/HidlSupport.cpp b/base/HidlSupport.cpp
index e08bf93..795cc1b 100644
--- a/base/HidlSupport.cpp
+++ b/base/HidlSupport.cpp
@@ -57,7 +57,7 @@ hidl_handle::hidl_handle(const hidl_handle& other) : hidl_handle() {
 }
 
 // move constructor.
-hidl_handle::hidl_handle(hidl_handle&& other) : hidl_handle() {
+hidl_handle::hidl_handle(hidl_handle&& other) noexcept : hidl_handle() { /* M3E: */
     mOwnsHandle = false;
     *this = std::move(other);
 }
@@ -88,7 +88,7 @@ hidl_handle &hidl_handle::operator=(const native_handle_t *native_handle) {
     return *this;
 }
 
-hidl_handle &hidl_handle::operator=(hidl_handle &&other) {
+hidl_handle &hidl_handle::operator=(hidl_handle &&other) noexcept {  /* M3E: */
     if (this != &other) {
         freeHandle();
         mHandle = other.mHandle;
@@ -169,11 +169,11 @@ hidl_string::hidl_string(const std::string &s) : hidl_string() {
     copyFrom(s.c_str(), s.size());
 }
 
-hidl_string::hidl_string(hidl_string &&other): hidl_string() {
+hidl_string::hidl_string(hidl_string &&other) noexcept: hidl_string() {  /* M3E: */
     moveFrom(std::forward<hidl_string>(other));
 }
 
-hidl_string &hidl_string::operator=(hidl_string &&other) {
+hidl_string &hidl_string::operator=(hidl_string &&other) noexcept {  /* M3E: */
     if (this != &other) {
         clear();
         moveFrom(std::forward<hidl_string>(other));
diff --git a/base/Status.cpp b/base/Status.cpp
index 1ba91c3..35b5836 100644
--- a/base/Status.cpp
+++ b/base/Status.cpp
@@ -21,6 +21,10 @@
 
 #include <unordered_map>
 
+#if defined(__linux__)  /* M3E: */
+#include <string.h> // strerror()
+#endif 
+
 namespace android {
 namespace hardware {
 
@@ -138,23 +142,29 @@ std::ostream& operator<< (std::ostream& stream, const Status& s) {
 
 namespace details {
     void return_status::assertOk() const {
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
         if (!isOk()) {
             LOG(FATAL) << "Attempted to retrieve value from failed HIDL call: " << description();
         }
+#endif
     }
 
     return_status::~return_status() {
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
         // mCheckedStatus must be checked before isOk since isOk modifies mCheckedStatus
         if (!mCheckedStatus && !isOk()) {
             LOG(FATAL) << "Failed HIDL return status not checked: " << description();
         }
+#endif
     }
 
     return_status &return_status::operator=(return_status &&other) {
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
         if (!mCheckedStatus && !isOk()) {
             LOG(FATAL) << "Failed HIDL return status not checked: " << description();
         }
         std::swap(mStatus, other.mStatus);
+#endif
         std::swap(mCheckedStatus, other.mCheckedStatus);
         return *this;
     }
diff --git a/base/include/hidl/HidlInternal.h b/base/include/hidl/HidlInternal.h
index ed9f02c..ce0bef0 100644
--- a/base/include/hidl/HidlInternal.h
+++ b/base/include/hidl/HidlInternal.h
@@ -145,6 +145,7 @@ struct HidlInstrumentor {
         PASSTHROUGH_EXIT,
     };
 
+#if !defined(_MSC_VER) /* M3E: MSVC */
     // Signature of the instrumentation callback function.
     using InstrumentationCallback = std::function<void(
             const InstrumentationEvent event,
@@ -153,7 +154,15 @@ struct HidlInstrumentor {
             const char *interface,
             const char *method,
             std::vector<void *> *args)>;
-
+#else
+	typedef void (* InstrumentationCallback)(
+		const InstrumentationEvent event,
+		const char *package,
+		const char *version,
+		const char *interfaced,
+		const char *method,
+		std::vector<void *> *args);
+#endif
     explicit HidlInstrumentor(
             const std::string &package,
             const std::string &insterface);
diff --git a/base/include/hidl/HidlSupport.h b/base/include/hidl/HidlSupport.h
index f8f79a5..08d0ae6 100644
--- a/base/include/hidl/HidlSupport.h
+++ b/base/include/hidl/HidlSupport.h
@@ -33,6 +33,12 @@
 #include <utils/StrongPointer.h>
 #include <vector>
 
+/* M3E: Add */
+#include <stdint.h>
+#ifndef __attribute
+#define __attribute __attribute__
+#endif
+
 namespace android {
 
 // this file is included by all hidl interface, so we must forward declare the
@@ -317,7 +323,9 @@ protected:
 template<typename T>
 struct hidl_vec {
     hidl_vec() {
+#if !defined(_MSC_VER) /* M3E: */
         static_assert(hidl_vec<T>::kOffsetOfBuffer == 0, "wrong offset");
+#endif
 
         memset(this, 0, sizeof(*this));
         // mSize is 0
@@ -909,7 +917,11 @@ std::string arrayToString(const Array &a, size_t size);
 
 template<size_t SIZE1>
 std::string arraySizeToString() {
+#if !defined(_MSC_VER) // M3E:
     return std::string{"["} + toString(SIZE1) + "]";
+#else
+    return std::string{ "[" } + std::to_string(SIZE1) + "]";
+#endif
 }
 
 template<size_t SIZE1, size_t SIZE2, size_t... SIZES>
diff --git a/base/include/hidl/Status.h b/base/include/hidl/Status.h
index 1a2ef6d..7f936c4 100644
--- a/base/include/hidl/Status.h
+++ b/base/include/hidl/Status.h
@@ -27,6 +27,12 @@
 namespace android {
 namespace hardware {
 
+#if defined(__linux__) /* M3E: Add */
+#  if defined(Status)
+#    undef Status
+#  endif
+#endif
+
 // An object similar in function to a status_t except that it understands
 // how exceptions are encoded in the prefix of a Parcel. Used like:
 //
@@ -134,7 +140,9 @@ template<typename T> class Return;
 namespace details {
     class return_status {
     private:
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
         Status mStatus {};
+#endif
         mutable bool mCheckedStatus = false;
 
         template <typename T, typename U>
@@ -143,8 +151,12 @@ namespace details {
         void assertOk() const;
     public:
         return_status() {}
-        return_status(const Status& s) : mStatus(s) {}
-
+        return_status(const Status& s)
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
+        : mStatus(s)
+#endif
+        {}
+        
         return_status(const return_status &) = delete;
         return_status &operator=(const return_status &) = delete;
 
@@ -156,20 +168,31 @@ namespace details {
         ~return_status();
 
         bool isOkUnchecked() const {
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
             // someone else will have to check
             return mStatus.isOk();
+#else
+            return true;
+#endif
         }
 
         bool isOk() const {
             mCheckedStatus = true;
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
             return mStatus.isOk();
+#else
+            return true;
+#endif
         }
 
         // Check if underlying error is DEAD_OBJECT.
         // Check mCheckedStatus only if this method returns true.
         bool isDeadObject() const {
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
             bool dead = mStatus.transactionError() == DEAD_OBJECT;
-
+#else
+            bool dead = false;
+#endif
             // This way, if you only check isDeadObject your process will
             // only be killed for more serious unchecked errors
             if (dead) {
@@ -181,8 +204,12 @@ namespace details {
 
         // For debugging purposes only
         std::string description() const {
+#if ENABLE_RETURN_CHECK /* M3E: remove return check */
             // Doesn't consider checked.
             return mStatus.description();
+#else
+            return "No return check";
+#endif
         }
     };
 }  // namespace details
diff --git a/libhidlmemory/mapping.cpp b/libhidlmemory/mapping.cpp
index 8f0bcf4..1a178b1 100644
--- a/libhidlmemory/mapping.cpp
+++ b/libhidlmemory/mapping.cpp
@@ -43,7 +43,11 @@ static inline sp<IMapper> getMapperService(const std::string& name) {
         return iter->second;
     }
 
+#if 0 // M3E:
     sp<IMapper> mapper = IMapper::getService(name, true /* getStub */);
+#else
+	sp<IMapper> mapper;
+#endif
     if (mapper != nullptr) {
         gMappersByName[name] = mapper;
     }
diff --git a/transport/token/1.0/utils/HybridInterface.cpp b/transport/token/1.0/utils/HybridInterface.cpp
index 106ad4e..bc463fc 100644
--- a/transport/token/1.0/utils/HybridInterface.cpp
+++ b/transport/token/1.0/utils/HybridInterface.cpp
@@ -44,7 +44,9 @@ bool isBadTokenManager() {
     if (gTokenManager != nullptr) {
         return false;
     }
+#if TODO /* M3E: */
     gTokenManager = ITokenManager::getService();
+#endif
     if (gTokenManager == nullptr) {
         ALOGE("Cannot retrieve TokenManager.");
         return true;
diff --git a/transport/token/1.0/utils/include/hidl/HybridInterface.h b/transport/token/1.0/utils/include/hidl/HybridInterface.h
index 984555e..0d9947f 100644
--- a/transport/token/1.0/utils/include/hidl/HybridInterface.h
+++ b/transport/token/1.0/utils/include/hidl/HybridInterface.h
@@ -103,7 +103,7 @@ constexpr uint32_t DEFAULT_GET_HAL_TOKEN_TRANSACTION_CODE =
         B_PACK_CHARS('_', 'G', 'H', 'T');
 
 sp<HInterface> retrieveHalInterface(const HalToken& token);
-bool createHalToken(const sp<HInterface>& interface, HalToken* token);
+bool createHalToken(const sp<HInterface>& _interface, HalToken* token); /* M3E: */
 bool deleteHalToken(const HalToken& token);
 
 template <
