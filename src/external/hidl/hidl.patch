diff --git a/Coordinator.cpp b/Coordinator.cpp
index 96c96582..3eba4a82 100644
--- a/Coordinator.cpp
+++ b/Coordinator.cpp
@@ -31,6 +31,10 @@
 #include "Interface.h"
 #include "hidl-gen_l.h"
 
+#if defined(__linux__)
+#include <cstring>
+#endif
+
 static bool existdir(const char *name) {
     DIR *dir = opendir(name);
     if (dir == NULL) {
@@ -49,9 +53,16 @@ const std::string &Coordinator::getRootPath() const {
 void Coordinator::setRootPath(const std::string &rootPath) {
     mRootPath = rootPath;
 
+#if defined(_MSC_VER)
+    if (!mRootPath.empty() && !StringHelper::EndsWith(mRootPath, "\\")) {
+        mRootPath += "\\";
+    }
+#else
     if (!mRootPath.empty() && !StringHelper::EndsWith(mRootPath, "/")) {
         mRootPath += "/";
     }
+#endif
+
 }
 
 void Coordinator::setOutputPath(const std::string& outputPath) {
@@ -390,7 +401,11 @@ const Coordinator::PackageRoot* Coordinator::findPackageRoot(const FQName& fqNam
 }
 
 std::string Coordinator::makeAbsolute(const std::string& path) const {
+#if defined(_MSC_VER)
+    if (StringHelper::StartsWith(path, "\\") || mRootPath.empty()) {
+#else
     if (StringHelper::StartsWith(path, "/") || mRootPath.empty()) {
+#endif
         return path;
     }
 
@@ -430,12 +445,20 @@ status_t Coordinator::getPackagePath(const FQName& fqName, bool relative, bool s
 
     std::vector<std::string> components;
     if (!relative) {
+#if defined(_MSC_VER)
+        components.push_back(StringHelper::RTrimAll(packageRoot->path, "\\"));
+#else
         components.push_back(StringHelper::RTrimAll(packageRoot->path, "/"));
+#endif
     }
     components.insert(components.end(), suffixComponents.begin(), suffixComponents.end());
     components.push_back(sanitized ? fqName.sanitizedVersion() : fqName.version());
 
+#if defined(_MSC_VER)
+    *path = StringHelper::JoinStrings(components, "\\") + "\\";
+#else
     *path = StringHelper::JoinStrings(components, "/") + "/";
+#endif
     return OK;
 }
 
@@ -518,11 +541,20 @@ status_t Coordinator::convertPackageRootToPath(const FQName& fqName, std::string
     status_t err = getPackageRoot(fqName, &packageRoot);
     if (err != OK) return err;
 
+#if defined(_MSC_VER)
+    std::string::const_iterator end_itr = (packageRoot.end()-1);
+    if (*end_itr != '.') {
+#else
     if (*(packageRoot.end()--) != '.') {
+#endif
         packageRoot += '.';
     }
 
+#if defined(_MSC_VER)
+    std::replace(packageRoot.begin(), packageRoot.end(), '.', '\\');
+#else
     std::replace(packageRoot.begin(), packageRoot.end(), '.', '/');
+#endif
 
     *path = packageRoot;  // now converted to a path
     return OK;
@@ -897,7 +929,11 @@ bool Coordinator::MakeParentHierarchy(const std::string &path) {
 
     size_t start = 1;  // Ignore leading '/'
     size_t slashPos;
+#if defined(_MSC_VER) 
+    while ((slashPos = path.find('\\', start)) != std::string::npos) {
+#else
     while ((slashPos = path.find('/', start)) != std::string::npos) {
+#endif
         std::string partial = path.substr(0, slashPos);
 
         struct stat st;
@@ -906,7 +942,11 @@ bool Coordinator::MakeParentHierarchy(const std::string &path) {
                 return false;
             }
 
+#if defined(_MSC_VER)
+            int res = mkdir(partial.c_str());
+#else
             int res = mkdir(partial.c_str(), kMode);
+#endif
             if (res < 0) {
                 return false;
             }
diff --git a/EnumType.cpp b/EnumType.cpp
index ead64ba7..728a522f 100644
--- a/EnumType.cpp
+++ b/EnumType.cpp
@@ -25,6 +25,10 @@
 #include "Location.h"
 #include "ScalarType.h"
 
+#if defined(__linux__)
+#include <algorithm>
+#endif
+
 namespace android {
 
 EnumType::EnumType(const char* localName, const FQName& fullName, const Location& location,
@@ -238,6 +242,18 @@ void EnumType::emitTypeDeclarations(Formatter& out) const {
     const ScalarType *scalarType = mStorageType->resolveToScalarType();
     CHECK(scalarType != nullptr);
 
+#if defined(_MSC_VER)
+    if (localName() == "Status") {
+        out << "#if defined(NO_ERROR)\n"
+            << "#undef NO_ERROR\n"
+            << "#endif\n";
+    } else if (localName() == "Transport") {
+        out << "#if defined(PASSTHROUGH)\n"
+            << "#undef PASSTHROUGH\n"
+            << "#endif\n";
+    } 
+#endif
+
     const std::string storageType = scalarType->getCppStackType();
 
     out << "enum class "
diff --git a/HidlTypeAssertion.cpp b/HidlTypeAssertion.cpp
index 4522f15a..4319f36f 100644
--- a/HidlTypeAssertion.cpp
+++ b/HidlTypeAssertion.cpp
@@ -21,6 +21,10 @@
 #include <string>
 #include <vector>
 
+#if defined(_MSC_VER) || defined(__linux__)
+#include <algorithm>
+#endif
+
 namespace android {
 
 typedef std::vector<std::pair<std::string, size_t>> Registry;
diff --git a/Interface.cpp b/Interface.cpp
index 1c66b315..e9820d1c 100644
--- a/Interface.cpp
+++ b/Interface.cpp
@@ -318,12 +318,14 @@ bool Interface::fillHashChainMethod(Method *method) const {
         HIDL_HASH_CHAIN_TRANSACTION,
         { { IMPL_INTERFACE, [this, digestType](auto &out) {
             std::vector<const Interface *> chain = typeChain();
+#if !defined(_MSC_VER)  // M3E: the MSVC doesn't support it
             out << "_hidl_cb(";
             out.block([&] {
                 emitDigestChain(out, "(" + digestType->getInternalDataCppType() + ")", chain,
                                 [](const auto& e) { return e->cppValue(); });
             });
             out << ");\n";
+#endif
             out << "return ::android::hardware::Void();\n";
         } } }, /* cppImpl */
         { { IMPL_INTERFACE, [this, digestType, chainType](auto &out) {
diff --git a/generateCpp.cpp b/generateCpp.cpp
index fa2a3ca5..067052ae 100644
--- a/generateCpp.cpp
+++ b/generateCpp.cpp
@@ -140,15 +140,25 @@ static void implementGetService(Formatter &out,
     const std::string interfaceName = fqName.getInterfaceName();
     const std::string functionName = isTry ? "tryGetService" : "getService";
 
+#if 1 // M3E:
+    if (interfaceName == "IComposer") {
+        return;
+    }
+#endif
+
     out << "// static\n"
         << "::android::sp<" << interfaceName << "> " << interfaceName << "::" << functionName << "("
         << "const std::string &serviceName, const bool getStub) ";
     out.block([&] {
+#if 0 // M3E:
         out << "return ::android::hardware::details::getServiceInternal<"
             << fqName.getInterfaceProxyName()
             << ">(serviceName, "
             << (!isTry ? "true" : "false") // retry
             << ", getStub);\n";
+#else
+        out << "return nullptr;\n";
+#endif
     }).endl().endl();
 }
 
@@ -160,6 +170,7 @@ static void implementServiceManagerInteractions(Formatter &out,
     implementGetService(out, fqName, true /* isTry */);
     implementGetService(out, fqName, false /* isTry */);
 
+#if 0 // M3E:
     out << "::android::status_t " << interfaceName << "::registerAsService("
         << "const std::string &serviceName) ";
     out.block([&] {
@@ -202,6 +213,7 @@ static void implementServiceManagerInteractions(Formatter &out,
         });
         out << "return success.isOk() && success;\n";
     }).endl().endl();
+#endif
 }
 
 void AST::generateInterfaceHeader(Formatter& out) const {
@@ -786,6 +798,7 @@ void AST::generateCppSource(Formatter& out) const {
         // This is a no-op for IServiceManager itself.
         out << "#include <android/hidl/manager/1.0/IServiceManager.h>\n";
 
+#if 0 // M3E:
         generateCppPackageInclude(out, mPackage, iface->getProxyName());
         generateCppPackageInclude(out, mPackage, iface->getStubName());
         generateCppPackageInclude(out, mPackage, iface->getPassthroughName());
@@ -795,6 +808,9 @@ void AST::generateCppSource(Formatter& out) const {
                                       superType->fqName(),
                                       superType->fqName().getInterfaceProxyName());
         }
+#else
+        generateCppPackageInclude(out, mPackage, "I" + iface->getBaseName());
+#endif
 
         out << "#include <hidl/ServiceManagement.h>\n";
     } else {
@@ -807,8 +823,10 @@ void AST::generateCppSource(Formatter& out) const {
     enterLeaveNamespace(out, true /* enter */);
     out << "\n";
 
+#if 0 // M3E:
     generateTypeSource(out, iface ? iface->localName() : "");
-
+#endif
+    
     if (iface) {
         const Interface* iface = mRootScope.getInterface();
 
@@ -818,6 +836,8 @@ void AST::generateCppSource(Formatter& out) const {
             << "::descriptor(\""
             << iface->fqName().string()
             << "\");\n\n";
+
+#if 0 // M3E:
         out << "__attribute__((constructor)) ";
         out << "static void static_constructor() {\n";
         out.indent([&] {
@@ -864,11 +884,14 @@ void AST::generateCppSource(Formatter& out) const {
                 << "::descriptor);\n";
         });
         out << "};\n\n";
+#endif
 
         generateInterfaceSource(out);
+#if 0  // M3E:
         generateProxySource(out, iface->fqName());
         generateStubSource(out, iface);
         generatePassthroughSource(out);
+#endif
 
         if (isIBase()) {
             out << "// skipped getService, registerAsService, registerForNotifications\n";
@@ -880,7 +903,9 @@ void AST::generateCppSource(Formatter& out) const {
         }
     }
 
+#if 0 // M3E:
     HidlTypeAssertion::EmitAll(out);
+#endif
     out << "\n";
 
     enterLeaveNamespace(out, false /* enter */);
@@ -1734,6 +1759,7 @@ void AST::generateInterfaceSource(Formatter& out) const {
         if (iface == superType) {
             out << "return parent;\n";
         } else {
+#if 0 // M3E:
             out << "return ::android::hardware::details::castInterface<";
             out << iface->localName() << ", "
                 << superType->fqName().cppName() << ", "
@@ -1744,8 +1770,12 @@ void AST::generateInterfaceSource(Formatter& out) const {
             out << "parent, \""
                 << iface->fqName().string()
                 << "\", emitError);\n";
+
             out.unindent();
             out.unindent();
+#else
+            out << "return nullptr;\n";
+#endif
         }
         out.unindent();
         out << "}\n\n";
diff --git a/hidl-gen_y.yy b/hidl-gen_y.yy
index f445199c..154fda49 100644
--- a/hidl-gen_y.yy
+++ b/hidl-gen_y.yy
@@ -38,6 +38,10 @@
 #include <hidl-util/StringHelper.h>
 #include <stdio.h>
 
+#if defined(__linux__) // M3E:
+#include <algorithm>
+#endif
+
 using namespace android;
 
 extern int yylex(yy::parser::semantic_type*, yy::parser::location_type*, void*, Scope** const);
diff --git a/main.cpp b/main.cpp
index dabbdaa4..a90ead4f 100644
--- a/main.cpp
+++ b/main.cpp
@@ -31,6 +31,13 @@
 #include <string>
 #include <vector>
 
+#if defined(_MSC_VER) || defined(__linux__) // M3E:
+#include <algorithm>
+#endif
+#if defined(__linux__)
+#include <cstring>
+#endif
+
 using namespace android;
 
 enum class OutputMode {
@@ -1341,9 +1348,15 @@ int main(int argc, char **argv) {
             }
 
             if (outputFormat->mOutputMode == OutputMode::NEEDS_DIR) {
+#if defined(_MSC_VER)
+                if (outputPath.back() != '\\') {
+                    outputPath += "\\";
+                }
+#else
                 if (outputPath.back() != '/') {
                     outputPath += "/";
                 }
+#endif
             }
             break;
         }
@@ -1351,9 +1364,15 @@ int main(int argc, char **argv) {
             if (outputPath.empty()) {
                 outputPath = coordinator.getRootPath();
             }
+#if defined(_MSC_VER)
+            if (outputPath.back() != '\\') {
+                outputPath += "\\";
+            }
+#else
             if (outputPath.back() != '/') {
                 outputPath += "/";
             }
+#endif
 
             break;
         }
@@ -1365,10 +1384,17 @@ int main(int argc, char **argv) {
 
     coordinator.setOutputPath(outputPath);
 
+#if defined(_MSC_VER)
+    coordinator.addDefaultPackagePath("android.hardware", "hardware\\interfaces");
+    coordinator.addDefaultPackagePath("android.hidl", "system\\libhidl\\transport");
+    coordinator.addDefaultPackagePath("android.frameworks", "frameworks\\hardware\\interfaces");
+    coordinator.addDefaultPackagePath("android.system", "system\\hardware\\interfaces");
+#else
     coordinator.addDefaultPackagePath("android.hardware", "hardware/interfaces");
     coordinator.addDefaultPackagePath("android.hidl", "system/libhidl/transport");
     coordinator.addDefaultPackagePath("android.frameworks", "frameworks/hardware/interfaces");
     coordinator.addDefaultPackagePath("android.system", "system/hardware/interfaces");
+#endif
 
     for (int i = 0; i < argc; ++i) {
         FQName fqName;
